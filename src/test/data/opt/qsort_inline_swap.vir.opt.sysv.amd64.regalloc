module qsort_inline_swap

function $partition { ; returns: rax
@2:
  mov rcx, rdi ; @68
  mov edi, dword ptr [rcx + rdx*4] ; @6
  lea r8, qword ptr [rdx - 0x1] ; @70
  lea rax, qword ptr [rsi - 0x1] ; @71
@3:
  cmp rsi, r8 ; @104
  jle @9 ; @105
@10:
  inc rax ; @73
  mov esi, dword ptr [rcx + rax*4] ; @34
  mov dword ptr [rcx + rax*4], edi ; @36
  mov dword ptr [rcx + rdx*4], esi ; @37
  ret ; @102
@9:
  mov r9d, dword ptr [rcx + rsi*4] ; @17
  cmp r9d, edi ; @95
  jg @14 ; @96
@13:
  inc rax ; @80
  mov r10d, dword ptr [rcx + rax*4] ; @25
  mov dword ptr [rcx + rax*4], r9d ; @27
  mov dword ptr [rcx + rsi*4], r10d ; @28
@14:
  inc rsi ; @79
  jmp @3 ; @89
}

export function $qsort {
@49:
  push rbp ; @136
  mov rbp, rsp ; @137
  push r12 ; @138
  push r13 ; @139
  push r14 ; @140
  push rbx ; @141
  mov r14, rdi ; @131
  mov r13, rdx ; @133
  mov rbx, rsi ; @134
@39:
  cmp rbx, r13 ; @126
  jl @40 ; @127
@48:
  pop rbx ; @142
  pop r14 ; @143
  pop r13 ; @144
  pop r12 ; @145
  leave ; @146
  ret ; @125
@40:
  mov rdi, r14 ; @43
  mov rsi, rbx ; @121
  mov rdx, r13 ; @122
  call $partition ; rdi rdx rsi ; @123
  mov r12, rax ; @124
  lea rdx, qword ptr [r12 - 0x1] ; @84
  mov rdi, r14 ; @45
  mov rsi, rbx ; @118
  call $qsort ; rdi rdx rsi ; @120
  lea rax, qword ptr [r12 + 0x1] ; @85
  mov rbx, rax ; @116
  jmp @39 ; @117
}
