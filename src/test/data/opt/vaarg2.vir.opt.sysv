module vaarg2

export function $foo(b %12/rax, l %i/rdi, ...) {
  %ap = slot 24, align 8
  %r = slot 16, align 8
  %6 = slot 176, align 16
  %22 = slot 16, align 8
@21:
  %7 = add.l %6, 0x8_l ; @22
  regstore rsi, %7 ; @23
  %8 = add.l %6, 0x10_l ; @24
  regstore rdx, %8 ; @25
  %9 = add.l %6, 0x18_l ; @26
  regstore rcx, %9 ; @27
  %10 = add.l %6, 0x20_l ; @28
  regstore r8, %10 ; @29
  %11 = add.l %6, 0x28_l ; @30
  regstore r9, %11 ; @31
  %13 = eq.b %12, 0x0_b ; @32
  br %13, @2, @20
@20:
  %14 = add.l %6, 0x30_l ; @33
  regstore xmm0, %14 ; @34
  %15 = add.l %6, 0x40_l ; @35
  regstore xmm1, %15 ; @36
  %16 = add.l %6, 0x50_l ; @37
  regstore xmm2, %16 ; @38
  %17 = add.l %6, 0x60_l ; @39
  regstore xmm3, %17 ; @40
  %18 = add.l %6, 0x70_l ; @41
  regstore xmm4, %18 ; @42
  %19 = add.l %6, 0x80_l ; @43
  regstore xmm5, %19 ; @44
  %20 = add.l %6, 0x90_l ; @45
  regstore xmm6, %20 ; @46
  %21 = add.l %6, 0xa0_l ; @47
  regstore xmm7, %21 ; @48
  jmp @2
@2:
  st.w 0x8_w, %ap ; @55
  %27 = add.l %ap, 0x4_l ; @56
  st.w 0x30_w, %27 ; @57
  %28 = stkargs ; @58
  %29 = add.l %ap, 0x8_l ; @59
  st.l %28, %29 ; @60
  %30 = add.l %ap, 0x10_l ; @61
  st.l %6, %30 ; @62
  jmp @64
@64:
  %31 = ld.w %ap ; @68
  %32 = le.w %31, 0x20_w ; @69
  br %32, @65, @66
@65:
  %35 = zext.l %31 ; @72
  %36 = add.l %6, %35 ; @73
  %37 = add.w %31, 0x10_w ; @74
  st.w %37, %ap ; @75
  jmp @67(%36)
@66:
  %39 = ld.l %29 ; @77
  %40 = add.l %39, 0x10_l ; @78
  st.l %40, %29 ; @79
  jmp @67(%39)
@67(%41):
  %42 = ld.l %41 ; @80
  st.l %42, %22 ; @81
  %43 = add.l %41, 0x8_l ; @82
  %44 = ld.l %43 ; @83
  %45 = add.l %22, 0x8_l ; @84
  st.l %44, %45 ; @85
  jmp @63
@63:
  %23 = ld.l %22 ; @49
  st.l %23, %r ; @50
  %25 = ld.l %45 ; @52
  %26 = add.l %r, 0x8_l ; @53
  st.l %25, %26 ; @54
  %f1.1 = ld.l %r ; @6
  %4 = add.l %f1.1, %25 ; @18
  %5 = add.l %4, %i ; @19
  ret rax/%5
}

export function $bar(b %52/rax, ...) {
  %ap = slot 24, align 8
  %46 = slot 176, align 16
@87:
  regstore rdi, %46 ; @88
  %47 = add.l %46, 0x8_l ; @89
  regstore rsi, %47 ; @90
  %48 = add.l %46, 0x10_l ; @91
  regstore rdx, %48 ; @92
  %49 = add.l %46, 0x18_l ; @93
  regstore rcx, %49 ; @94
  %50 = add.l %46, 0x20_l ; @95
  regstore r8, %50 ; @96
  %51 = add.l %46, 0x28_l ; @97
  regstore r9, %51 ; @98
  %53 = eq.b %52, 0x0_b ; @99
  br %53, @11, @86
@86:
  %54 = add.l %46, 0x30_l ; @100
  regstore xmm0, %54 ; @101
  %55 = add.l %46, 0x40_l ; @102
  regstore xmm1, %55 ; @103
  %56 = add.l %46, 0x50_l ; @104
  regstore xmm2, %56 ; @105
  %57 = add.l %46, 0x60_l ; @106
  regstore xmm3, %57 ; @107
  %58 = add.l %46, 0x70_l ; @108
  regstore xmm4, %58 ; @109
  %59 = add.l %46, 0x80_l ; @110
  regstore xmm5, %59 ; @111
  %60 = add.l %46, 0x90_l ; @112
  regstore xmm6, %60 ; @113
  %61 = add.l %46, 0xa0_l ; @114
  regstore xmm7, %61 ; @115
  jmp @11
@11:
  st.w 0x0_w, %ap ; @116
  %62 = add.l %ap, 0x4_l ; @117
  st.w 0x30_w, %62 ; @118
  %63 = stkargs ; @119
  %64 = add.l %ap, 0x8_l ; @120
  st.l %63, %64 ; @121
  %65 = add.l %ap, 0x10_l ; @122
  st.l %46, %65 ; @123
  jmp @125
@125:
  %66 = ld.w %ap ; @129
  %67 = le.w %66, 0x28_w ; @130
  br %67, @126, @127
@126:
  %70 = zext.l %66 ; @133
  %71 = add.l %46, %70 ; @134
  %72 = add.w %66, 0x8_w ; @135
  st.w %72, %ap ; @136
  jmp @128(%71)
@127:
  %74 = ld.l %64 ; @138
  %75 = add.l %74, 0x8_l ; @139
  st.l %75, %64 ; @140
  jmp @128(%74)
@128(%76):
  %t.1 = ld.b %76 ; @141
  jmp @124
@124:
  ret rax/%t.1
}
