module int_pow

export function l $int_pow(l %base, l %exponent) {
@2:
  jmp @3(0x1_l, 0x1_l, %base, %exponent)
@3(%ret.2, %mul3.2, %mul1.2, %exponent.1):
  %0 = ne.l %exponent.1, 0x0_l ; @27
  br %0, @9, @10
@9:
  %1 = and.l %exponent.1, 0x3_l ; @28
  switch.l %1, @21(%ret.2) [0x1_l -> @14,
                            0x2_l -> @15,
                            0x3_l -> @16]
@14:
  %13 = mul.l %mul1.2, %mul3.2 ; @40
  %14 = mul.l %ret.2, %13 ; @41
  jmp @21(%14)
@15:
  %10 = mul.l %mul1.2, %mul3.2 ; @37
  %11 = mul.l %ret.2, %10 ; @38
  %12 = mul.l %11, %10 ; @39
  jmp @21(%12)
@16:
  %6 = mul.l %mul1.2, %mul3.2 ; @33
  %8 = mul.l %6, %6 ; @35
  %7 = mul.l %ret.2, %6 ; @34
  %9 = mul.l %7, %8 ; @36
  jmp @21(%9)
@21(%ret.3):
  %2 = mul.l %mul1.2, %mul3.2 ; @29
  %3 = mul.l %2, %2 ; @30
  %4 = mul.l %3, %2 ; @31
  %5 = asr.l %exponent.1, 0x2_l ; @32
  jmp @3(%ret.3, %4, %2, %5)
@10:
  ret %ret.2
}
