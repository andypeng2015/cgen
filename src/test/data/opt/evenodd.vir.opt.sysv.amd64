module evenodd

function $abs { ; returns: rax
@2:
  mov %n:w, edi ; @30
  test %n:w, %n:w ; @44
  js @3 ; @45
  jmp @36 ; @46
@36:
  mov %0:w, %n:w ; @42
  jmp @21 ; @43
@3:
  mov %10:w, %n:w ; @31
  neg %10:w ; @41
  mov %0:w, %10:w ; @39
  jmp @21 ; @40
@21:
  mov eax, %0:w ; @37
  ret ; @38
}

export function $even { ; returns: rax
@7:
  mov %n:w, edi ; @10
  mov edi, %n:w ; @64
  call $abs ; rdi ; @65
  mov %n.1:w, eax ; @66
  test %n.1:w, %n.1:w ; @59
  je @50 ; @60
  jmp @9 ; @61
@50:
  mov %1:b, 0x1_b ; @57
  jmp @22 ; @58
@9:
  lea %12:w, qword ptr [%n.1 - 0x1] ; @33
  mov edi, %12:w ; @13
  call $odd ; rdi ; @55
  mov %b.1:b, al ; @56
  mov %1:b, %b.1:b ; @53
  jmp @22 ; @54
@22:
  mov al, %1:b ; @51
  ret ; @52
}

export function $odd { ; returns: rax
@14:
  mov %n:w, edi ; @17
  mov edi, %n:w ; @81
  call $abs ; rdi ; @82
  mov %n.1:w, eax ; @83
  test %n.1:w, %n.1:w ; @76
  je @67 ; @77
  jmp @16 ; @78
@67:
  xor %2:b, %2:b ; @74
  jmp @23 ; @75
@16:
  lea %14:w, qword ptr [%n.1 - 0x1] ; @35
  mov edi, %14:w ; @20
  call $even ; rdi ; @72
  mov %b.1:b, al ; @73
  mov %2:b, %b.1:b ; @70
  jmp @23 ; @71
@23:
  mov al, %2:b ; @68
  ret ; @69
}
