module evenodd

function $abs { ; returns: rax
@2:
  mov %n:w, edi ; @24
  test %n:w, %n:w ; @38
  js @3 ; @39
  jmp @30 ; @40
@30:
  mov %0:w, %n:w ; @36
  jmp @21 ; @37
@3:
  mov %4:w, %n:w ; @25
  neg %4:w ; @35
  mov %0:w, %4:w ; @33
  jmp @21 ; @34
@21:
  mov eax, %0:w ; @31
  ret ; @32
}

export function $even { ; returns: rax
@7:
  mov %n:w, edi ; @10
  mov edi, %n:w ; @58
  call $abs ; rdi ; @59
  mov %n.1:w, eax ; @60
  test %n.1:w, %n.1:w ; @53
  je @44 ; @54
  jmp @9 ; @55
@44:
  mov %1:b, 0x1_b ; @51
  jmp @22 ; @52
@9:
  lea %6:w, qword ptr [%n.1 - 0x1] ; @27
  mov edi, %6:w ; @13
  call $odd ; rdi ; @49
  mov %b.1:b, al ; @50
  mov %1:b, %b.1:b ; @47
  jmp @22 ; @48
@22:
  mov al, %1:b ; @45
  ret ; @46
}

export function $odd { ; returns: rax
@14:
  mov %n:w, edi ; @17
  mov edi, %n:w ; @75
  call $abs ; rdi ; @76
  mov %n.1:w, eax ; @77
  test %n.1:w, %n.1:w ; @70
  je @61 ; @71
  jmp @16 ; @72
@61:
  xor %2:b, %2:b ; @68
  jmp @23 ; @69
@16:
  lea %8:w, qword ptr [%n.1 - 0x1] ; @29
  mov edi, %8:w ; @20
  call $even ; rdi ; @66
  mov %b.1:b, al ; @67
  mov %2:b, %b.1:b ; @64
  jmp @23 ; @65
@23:
  mov al, %2:b ; @62
  ret ; @63
}
