module qsort

function $swap {
@2:
  mov %a:l, rdi ; @3
  mov %b:l, rsi ; @86
  mov %x.1:w, dword ptr [%a] ; @87
  mov %y.1:w, dword ptr [%b] ; @4
  mov dword ptr [%b], %x.1:w ; @5
  mov dword ptr [%a], %y.1:w ; @6
  ret ; @85
}

function $partition { ; returns: rax
@7:
  mov %arr:l, rdi ; @67
  mov %low:l, rsi ; @118
  mov %high:l, rdx ; @119
  lea %22:l, qword ptr [%arr + %high*4] ; @68
  mov %pivot.1:w, dword ptr [%arr + %high*4] ; @11
  lea %23:l, qword ptr [%high - 0x1] ; @69
  lea %24:l, qword ptr [%low - 0x1] ; @70
  mov %j.2:l, %low:l ; @115
  mov %i.2:l, %24:l ; @116
  jmp @8 ; @117
@8:
  cmp %j.2:l, %23:l ; @110
  jle @14 ; @111
  jmp @15 ; @112
@15:
  lea %26:l, qword ptr [%i.2 + 0x1] ; @72
  lea %28:l, qword ptr [%arr + %26*4] ; @74
  mov rdi, %28:l ; @36
  mov rsi, %22:l ; @107
  call $swap ; rdi rsi ; @108
  mov rax, %26:l ; @105
  ret ; @106
@14:
  lea %30:l, qword ptr [%arr + %j.2*4] ; @76
  mov %j_val.1:w, dword ptr [%arr + %j.2*4] ; @22
  cmp %j_val.1:w, %pivot.1:w ; @99
  jle @18 ; @100
  jmp @88 ; @101
@88:
  mov %i.3:l, %i.2:l ; @97
  jmp @19 ; @98
@18:
  lea %33:l, qword ptr [%i.2 + 0x1] ; @79
  lea %35:l, qword ptr [%arr + %33*4] ; @81
  mov rdi, %35:l ; @30
  mov rsi, %30:l ; @94
  call $swap ; rdi rsi ; @95
  mov %i.3:l, %33:l ; @92
  jmp @19 ; @93
@19:
  lea %32:l, qword ptr [%j.2 + 0x1] ; @78
  mov %j.2:l, %32:l ; @89
  mov %i.2:l, %i.3:l ; @90
  jmp @8 ; @91
}

export function $qsort {
@48:
  mov %arr:l, rdi ; @137
  mov %low:l, rsi ; @138
  mov %high:l, rdx ; @139
  mov %1:l, %low:l ; @140
  jmp @38 ; @141
@38:
  cmp %1:l, %high:l ; @132
  jl @39 ; @133
  jmp @47 ; @134
@47:
  ret ; @131
@39:
  mov rdi, %arr:l ; @42
  mov rsi, %1:l ; @127
  mov rdx, %high:l ; @128
  call $partition ; rdi rdx rsi ; @129
  mov %p.1:l, rax ; @130
  lea %37:l, qword ptr [%p.1 - 0x1] ; @83
  mov rdi, %arr:l ; @44
  mov rsi, %1:l ; @124
  mov rdx, %37:l ; @125
  call $qsort ; rdi rdx rsi ; @126
  lea %38:l, qword ptr [%p.1 + 0x1] ; @84
  mov %1:l, %38:l ; @122
  jmp @38 ; @123
}
